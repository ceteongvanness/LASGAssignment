//====================================================================================================
// Base code generated with Motion: BC Gen (Build 3.0.5898.28997)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by et.cheah at ENGTEONG on 11/30/2016 11:14:10 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Ass5.Entities;
using Ass5.Data;

using MK.Framework.ACE;
using MK.Framework.ACE.Entities;
using MK.Framework.SNE;
using MK.Framework.AE;
using MK.Framework.AE.Entities;
using MK.Framework.DXE;
using MK.Framework.DXE.Enumeration;

namespace Ass5.Business
{
    /// <summary>
    /// Task business component.
    /// </summary>
    public partial class TaskComponent
    {
        /// <summary>
        /// Apply business method. 
        /// </summary>
        /// <param name="task">A task value.</param>
        /// <returns>Returns a Task object.</returns>
        public Task Apply(Task task)
        {
            TaskLog taskLog = default(TaskLog);
            Task result = default(Task);

            // Data access component declarations.
            var taskDAC = new TaskDAC();
            var taskLogDAC = new TaskLogDAC();

            Sequencer sequencer = Sequencer.Create();
            task.TaskNo = "TA" + sequencer.Next();
            task.DateSubmitted = DateTime.Now;
            task.TaskStatus = "Pending";

            // Step 1 - Calling Create on TaskDAC.
            result = taskDAC.Create(task);

            taskLog = new TaskLog();
            taskLog.TaskID = task.TaskID;
            taskLog.TaskName = task.TaskName;
            taskLog.StartDate = task.StartDate;
            taskLog.EndDate = task.EndDate;
            taskLog.DateSubmitted = task.DateSubmitted;
            taskLog.TaskStatus = task.TaskStatus;
            taskLog.TaskNo = task.TaskNo;

            // Step 2 - Calling Create on TaskLogDAC.
            taskLog = taskLogDAC.Create(taskLog);
            return result;

        }

        /// <summary>
        /// Approve business method. 
        /// </summary>
        /// <param name="task">A task value.</param>
        public void Approve(Task task)
        {
            TaskLog taskLog = default(TaskLog);
            // Data access component declarations.
            var taskDAC = new TaskDAC();

            Task oldTask = taskDAC.SelectById(task.TaskID);
            var taskLogDAC = new TaskLogDAC();

            task.TaskStatus = "Approve";
            // Step 1 - Calling UpdateById on TaskDAC.
            taskDAC.UpdateById(task);

            var auditLog = new AuditLog();
            auditLog.Module = "Approve Task";
            auditLog.Action = "Approve Task";
            auditLog.Description = "Approve Task";
            auditLog.CreateBy = Environment.MachineName;
            var auditor = new Auditor();
            auditor.AuditModified(auditLog, oldTask, task);

            taskLog = new TaskLog();
            taskLog.TaskID = task.TaskID;
            taskLog.TaskName = task.TaskName;
            taskLog.StartDate = task.StartDate;
            taskLog.EndDate = task.EndDate;
            taskLog.DateSubmitted = task.DateSubmitted;
            taskLog.TaskStatus = task.TaskStatus;
            taskLog.TaskNo = task.TaskNo;

            // Step 2 - Calling Create on TaskLogDAC.
            taskLogDAC.Create(taskLog);

        }

        /// <summary>
        /// Cancel business method. 
        /// </summary>
        /// <param name="task">A task value.</param>
        public void Cancel(Task task)
        {
            TaskLog taskLog = default(TaskLog);
            // Data access component declarations.
            var taskDAC = new TaskDAC();

            Task oldTask = taskDAC.SelectById(task.TaskID);
            var taskLogDAC = new TaskLogDAC();

            task.TaskStatus = "Canceled";
            // Step 1 - Calling UpdateById on TaskDAC.
            taskDAC.UpdateById(task);

            var auditLog = new AuditLog();
            auditLog.Module = "Cancel Task";
            auditLog.Action = "Cancel Task";
            auditLog.Description = "Cancel Task";
            auditLog.CreateBy = Environment.MachineName;

            taskLog = new TaskLog();
            taskLog.TaskID = task.TaskID;
            taskLog.TaskName = task.TaskName;
            taskLog.StartDate = task.StartDate;
            taskLog.EndDate = task.EndDate;
            taskLog.DateSubmitted = task.DateSubmitted;
            taskLog.TaskStatus = task.TaskStatus;
            taskLog.TaskNo = task.TaskNo;

            var auditor = new Auditor();
            auditor.AuditModified(auditLog,oldTask, task);
            // Step 2 - Calling Create on TaskLogDAC.
            taskLogDAC.Create(taskLog);

        }

        /// <summary>
        /// ListTask business method. 
        /// </summary>
        /// <param name="currentPage">A currentPage value.</param>
        /// <returns>Returns a List<Task> object.</returns>
        public List<Task> ListTask()
        {
            List<Task> result = default(List<Task>);

            // Data access component declarations.
            var taskDAC = new TaskDAC();

            // Step 1 - Calling SelectPage on TaskDAC.
            result = taskDAC.Select();
            return result;

        }

        /// <summary>
        /// GetTask business method. 
        /// </summary>
        /// <param name="taskID">A taskID value.</param>
        /// <returns>Returns a Task object.</returns>
        public Task GetTask(int taskID)
        {
            Task result = default(Task);

            // Data access component declarations.
            var taskDAC = new TaskDAC();

            // Step 1 - Calling SelectById on TaskDAC.
            result = taskDAC.SelectById(taskID);
            return result;

        }

        /// <summary>
        /// Reject business method. 
        /// </summary>
        /// <param name="task">A task value.</param>
        public void Reject(Task task)
        {
            // Data access component declarations.
            var taskDAC = new TaskDAC();
            Task oldTask = taskDAC.SelectById(task.TaskID);

            task.TaskStatus = "Rejected";
            // Step 1 - Calling UpdateById on TaskDAC.
            taskDAC.UpdateById(task);
            var auditLog = new AuditLog();
            auditLog.Module = "Reject Task";
            auditLog.Action = "Reject Task";
            auditLog.Description = "Reject Task";
            auditLog.CreateBy = Environment.MachineName;

            TaskLog taskLog = new TaskLog();
            taskLog.TaskID = task.TaskID;
            taskLog.TaskName = task.TaskName;
            taskLog.StartDate = task.StartDate;
            taskLog.EndDate = task.EndDate;
            taskLog.DateSubmitted = task.DateSubmitted;
            taskLog.TaskStatus = task.TaskStatus;
            taskLog.TaskNo = task.TaskNo;

            var auditor = new Auditor();
            auditor.AuditModified(auditLog, oldTask, task);

        }

        /// <summary>
        /// Delay business method. 
        /// </summary>
        /// <param name="task">A task value.</param>
        //public void Delay(Task task)
        //{
        //    // Data access component declarations.
        //    var taskDAC = new TaskDAC();

        //    // Step 1 - Calling UpdateById on TaskDAC.
        //    taskDAC.UpdateById(task);

        //}

        public User LoginVerify(string Username, string Password)
        {
            User useraccess;

            var ace = new AccessControl();
            useraccess = ace.Authenticate("TA", Username, Password);

            return useraccess;
        }

        public void Export()
        {
            PackageCreator packageCreator = new PackageCreator();
            packageCreator.ExecuteMode = ExecuteMode.FileSystem;
            packageCreator.StagingFolder = @"C:\Temp\Drop\Staging";

            //// Generate CSV file
            string password = packageCreator.CreateExportToFlatFilePackage(
            "MyExcelDtsxPackage", "SELECT [TaskID], [TaskName], [StartDate], [EndDate], [CorrelationID], [DateSubmitted],[TaskStatus],[TaskNo] FROM dbo.Task", @"Data Source=ENGTEONG;Initial Catalog=Assignment;User ID=sa;Password=password#2016", "MyGeneratedExcelFile", ".csv", "|", true, true);
        }

        public AccessPolicy GetUserPermission(long userID, string policyId)
        {
            var ace = new AccessControl();
            var ap = ace.GetAccessPolicy(userID, policyId);
            return ap;
        }

        /// <summary>
        /// Update business method. 
        /// </summary>
        /// <param name="task">A task value.</param>
        /// <param name="taskLog">A taskLog value.</param>
        public void Update(Task task, TaskLog taskLog)
        {
            // Data access component declarations.
            var taskDAC = new TaskDAC();
            var taskLogDAC = new TaskLogDAC();

            task.TaskStatus = "Unattended";
            // Step 1 - Calling UpdateById on TaskDAC.
            taskDAC.UpdateById(task);

            taskLog = new TaskLog();
            taskLog.TaskID = task.TaskID;
            taskLog.TaskName = task.TaskName;
            taskLog.StartDate = task.StartDate;
            taskLog.EndDate = task.EndDate;
            taskLog.DateSubmitted = task.DateSubmitted;
            taskLog.TaskStatus = task.TaskStatus;
            taskLog.TaskNo = task.TaskNo;

            //// Step 2 - Calling Create on TaskLogDAC.
            taskLogDAC.Create(taskLog);

        }
    }
}
