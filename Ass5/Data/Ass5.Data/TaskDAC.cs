//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 3.0.5898.28997)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by et.cheah at ENGTEONG on 11/30/2016 11:00:42 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
using Ass5.Entities;

namespace Ass5.Data
{
    /// <summary>
    /// Task data access component. Manages CRUD operations for the Task table.
    /// </summary>
    public partial class TaskDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the Task table.
        /// </summary>
        /// <param name="task">A Task object.</param>
        /// <returns>An updated Task object.</returns>
        public Task Create(Task task)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.Task ([TaskName], [StartDate], [EndDate], [CorrelationID], [DateSubmitted], [TaskStatus], [TaskNo]) " +
                "VALUES(@TaskName, @StartDate, @EndDate, @CorrelationID, @DateSubmitted, @TaskStatus, @TaskNo); SELECT SCOPE_IDENTITY(); ";

            // Connect to database.
            var db = new SqlDatabase(base.ConnectionString);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                // db.AddInParameter(cmd, "@TaskID", DbType.Int16, task.TaskID);
                db.AddInParameter(cmd, "@TaskName", DbType.String, task.TaskName);
                db.AddInParameter(cmd, "@StartDate", DbType.Date, task.StartDate);
                db.AddInParameter(cmd, "@EndDate", DbType.Date, task.EndDate);
                db.AddInParameter(cmd, "@CorrelationID", DbType.Guid, task.CorrelationID);
                db.AddInParameter(cmd, "@DateSubmitted", DbType.Date, task.DateSubmitted);
                db.AddInParameter(cmd, "@TaskStatus", DbType.String, task.TaskStatus);
                db.AddInParameter(cmd, "@TaskNo", DbType.String, task.TaskNo);

                task.TaskID = Convert.ToInt32(db.ExecuteScalar(cmd));
            }

            return task;
        }

        /// <summary>
        /// Updates an existing row in the Task table.
        /// </summary>
        /// <param name="task">A Task entity object.</param>
        public void UpdateById(Task task)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.Task " +
                "SET " +
                    "[TaskStatus]=@TaskStatus " +
                "WHERE [TaskID]=@TaskID ";

            // Connect to database.
            var db = new SqlDatabase(base.ConnectionString);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TaskStatus", DbType.String, task.TaskStatus);
                db.AddInParameter(cmd, "@TaskID", DbType.Int32, task.TaskID);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the Task table.
        /// </summary>
        /// <param name="taskID">A TaskID value.</param>
        /// <returns>A Task object with data populated from the database.</returns>
        public Task SelectById(int taskID)
        {
            const string SQL_STATEMENT =
                "SELECT [TaskID], [TaskName], [StartDate], [EndDate], [CorrelationID], [DateSubmitted], [TaskStatus]" +
                        ", [TaskNo] " +
                "FROM dbo.Task  " +
                "WHERE [TaskID]=@TaskID ";

            Task task = null;

            // Connect to database.
            var db = new SqlDatabase(base.ConnectionString);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@TaskID", DbType.String, taskID);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new Task
                        task = new Task();

                        // Read values.
                        task.TaskID = GetDataValue<int>(dr, "TaskID");
                        task.TaskName = GetDataValue<string>(dr, "TaskName");
                        task.StartDate = GetDataValue<DateTime>(dr, "StartDate");
                        task.EndDate = GetDataValue<DateTime>(dr, "EndDate");
                        task.CorrelationID = GetDataValue<Guid>(dr, "CorrelationID");
                        task.DateSubmitted = GetDataValue<DateTime>(dr, "DateSubmitted");
                        task.TaskStatus = GetDataValue<string>(dr, "TaskStatus");
                        task.TaskNo = GetDataValue<string>(dr, "TaskNo");
                    }
                }
            }

            return task;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the Task table with paging.
        /// </summary>
        /// <param name="currentPage">The currentPage value.</param>
        /// <returns>A collection of Task objects.</returns>		
        //public List<Task> SelectPage(int currentPage)
        //{
        //    const string SQL_STATEMENT =
        //        "WITH SortedTask AS " +
        //        "(SELECT ROW_NUMBER() OVER (ORDER BY [DateSubmitted] DESC) AS RowNumber, " +
        //            "[TaskID], [TaskName], [StartDate], [EndDate], [CorrelationID], [DateSubmitted], [TaskStatus]" +
        //                ", [TaskNo] " +
        //            "FROM dbo.Task " +
        //        ") SELECT * FROM SortedTask " +
        //        "WHERE RowNumber BETWEEN @StartIndex AND @EndIndex";

        //    // PageSize is retrieved from config file via the base class.
        //    long startIndex = (currentPage * base.PageSize);
        //    long endIndex = startIndex + base.PageSize;

        //    startIndex += 1;
        //    List<Task> result = new List<Task>();

        //    // Connect to database.
        //    var db = new SqlDatabase(base.ConnectionString);
        //    using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
        //    {
        //        // Paging parameters.
        //        db.AddInParameter(cmd, "@StartIndex", DbType.Int64, startIndex);
        //        db.AddInParameter(cmd, "@EndIndex", DbType.Int64, endIndex);

        //        using (IDataReader dr = db.ExecuteReader(cmd))
        //        {
        //            while (dr.Read())
        //            {
        //                // Create a new Task
        //                Task task = new Task();

        //                // Read values.
        //                task.TaskID = GetDataValue<int>(dr, "TaskID");
        //                task.TaskName = GetDataValue<string>(dr, "TaskName");
        //                task.StartDate = GetDataValue<DateTime>(dr, "StartDate");
        //                task.EndDate = GetDataValue<DateTime>(dr, "EndDate");
        //                task.CorrelationID = GetDataValue<Guid>(dr, "CorrelationID");
        //                task.DateSubmitted = GetDataValue<DateTime>(dr, "DateSubmitted");
        //                task.TaskStatus = GetDataValue<string>(dr, "TaskStatus");
        //                task.TaskNo = GetDataValue<string>(dr, "TaskNo");

        //                // Add to List.
        //                result.Add(task);
        //            }
        //        }
        //    }

        //    return result;
        //}

        /// <summary>
        /// Conditionally retrieves one or more rows from the Task table.
        /// </summary>
        /// <returns>A collection of Task objects.</returns>		
        public List<Task> Select()
        {
            // WARNING! The following SQL query does not contain a WHERE condition.
            // You are advised to include a WHERE condition to prevent any performance
            // issues when querying large resultsets.
            const string SQL_STATEMENT =
                "SELECT [TaskID], [TaskName], [StartDate], [EndDate], [CorrelationID], [DateSubmitted], [TaskStatus]" +
                        ", [TaskNo] " +
                "FROM dbo.Task ";

            List<Task> result = new List<Task>();

            // Connect to database.
            var db = new SqlDatabase(base.ConnectionString);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new Task
                        Task task = new Task();

                        // Read values.
                        task.TaskID = GetDataValue<int>(dr, "TaskID");
                        task.TaskName = GetDataValue<string>(dr, "TaskName");
                        task.StartDate = GetDataValue<DateTime>(dr, "StartDate");
                        task.EndDate = GetDataValue<DateTime>(dr, "EndDate");
                        task.CorrelationID = GetDataValue<Guid>(dr, "CorrelationID");
                        task.DateSubmitted = GetDataValue<DateTime>(dr, "DateSubmitted");
                        task.TaskStatus = GetDataValue<string>(dr, "TaskStatus");
                        task.TaskNo = GetDataValue<string>(dr, "TaskNo");

                        // Add to List.
                        result.Add(task);
                    }
                }
            }

            return result;
        }
    }
}

