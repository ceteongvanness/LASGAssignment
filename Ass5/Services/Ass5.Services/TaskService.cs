//====================================================================================================
// Base code generated with Velocity: SL Gen (Build 3.0.5898.28997)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by et.cheah at ENGTEONG on 11/30/2016 15:12:16 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ServiceModel;
using Ass5.Business;
using Ass5.Entities;
using MK.Framework.ACE.Entities;
using Ass5.Services.Contracts;

namespace Ass5.Services
{
    /// <summary>
    /// Task service component.
    /// </summary>
    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall, ConcurrencyMode = ConcurrencyMode.Multiple)]
    public class TaskService : ITaskService
    {
        /// <summary>
        /// Calls the Export business method of the TaskComponent.
        /// </summary>
        public void Export()
        {
            var bc = new TaskComponent();
            bc.Export();
        }

        /// <summary>
        /// Calls the GetTask business method of the TaskComponent.
        /// </summary>
        /// <param name="taskID"> A taskID value.</param>
        /// <returns>Returns a Task object.</returns>
        public Task GetTask(int taskID)
        {
            var bc = new TaskComponent();
            return bc.GetTask(taskID);
        }

        /// <summary>
        /// Calls the GetUserPermission business method of the TaskComponent.
        /// </summary>
        /// <param name="userID"> A userID value.</param>
        /// <param name="policyId"> A policyId value.</param>
        /// <returns>Returns a AccessPolicy object.</returns>
        public AccessPolicy GetUserPermission(long userID, string policyId)
        {
            var bc = new TaskComponent();
            return bc.GetUserPermission(userID, policyId);
        }

        /// <summary>
        /// Calls the ListTask business method of the TaskComponent.
        /// </summary>
        /// <param name="currentPage"> A currentPage value.</param>
        /// <returns>Returns a List<Task> object.</returns>
        public List<Task> ListTask()
        {
            var bc = new TaskComponent();
            return bc.ListTask();
        }

        /// <summary>
        /// Calls the LoginVerify business method of the TaskComponent.
        /// </summary>
        /// <param name="Username"> A Username value.</param>
        /// <param name="Password"> A Password value.</param>
        /// <returns>Returns a User object.</returns>
        public User LoginVerify(string Username, string Password)
        {
            var bc = new TaskComponent();
            return bc.LoginVerify(Username, Password);
        }


        /// <summary>
        /// Calls the Update business method of the TaskComponent.
        /// </summary>
        /// <param name="task"> A task value.</param>
        /// <param name="taskLog"> A taskLog value.</param>
        public void Update(Task task, TaskLog taskLog)
        {
            var bc = new TaskComponent();
            bc.Update(task, taskLog);
        }

        /// <summary>
        /// Calls the Apply business method of the TaskComponent.
        /// </summary>
        /// <param name="task"> A task value.</param>
        /// <returns>Returns a Task object.</returns>
        public Task Apply(Task task)
        {
            var bc = new TaskComponent();
            return bc.Apply(task);
        }

        /// <summary>
        /// Calls the Approve business method of the TaskComponent.
        /// </summary>
        /// <param name="task"> A task value.</param>
        public void Approve(Task task)
        {
            var bc = new TaskComponent();
            bc.Approve(task);
        }

        /// <summary>
        /// Calls the Cancel business method of the TaskComponent.
        /// </summary>
        /// <param name="task"> A task value.</param>
        public void Cancel(Task task)
        {
            var bc = new TaskComponent();
            bc.Cancel(task);
        }

        /// <summary>
        /// Calls the Delay business method of the TaskComponent.
        /// </summary>
        /// <param name="task"> A task value.</param>
        //public void Delay(Task task)
        //{
        //    var bc = new TaskComponent();
        //    bc.Delay(task);
        //}

 
        /// <summary>
        /// Calls the Reject business method of the TaskComponent.
        /// </summary>
        /// <param name="task"> A task value.</param>
        public void Reject(Task task)
        {
            var bc = new TaskComponent();
            bc.Reject(task);
        }

    }
}
